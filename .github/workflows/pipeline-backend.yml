name: BSN Backend API Pipeline
on:
  push:
      branches:
        - ci/pipeline
      paths:
        - book-network/**
        - docker/backend/**
        - 'docker-compose.yml'
        - .github/workflows/*-backend.yml
jobs:
  compile-project:
    name: Compile project
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup JDK
        uses: actions/setup-java@v4.2.1
        with:
          distribution: 'corretto'
          java-version: '17'
      - name: Compile
        run: |
          cd book-network
          ./mvnw clean compile

  #unit-tests:
    #  name: Unit tests
    #runs-on: ubuntu-latest
      #steps:
        #- name: Checkout code
        #uses: actions/checkout@v4
          #with:
        #fetch-depth: 0
        #- name: Setup JDK
        #uses: actions/setup-java@v4.2.1
          #with:
          #distribution: 'corretto'
        #java-version: '17'
        #- name: Run unit tests
          #run: |
          #cd book-network
        #./mvnw clean test

  build:
    name: Build project
    runs-on: ubuntu-latest
    needs: [compile-project]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup JDK
        uses: actions/setup-java@v4.2.1
        with:
          distribution: 'corretto'
          java-version: '17'
      - name: Build project
        run: |
          cd book-network
          ./mvnw clean package -DskipTests
  
  build-docker-image:
    name: Build docker image
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup JDK
        uses: actions/setup-java@v4.2.1
        with:
          distribution: 'corretto'
          java-version: '17'
      - name: Build project
        run: |
          cd book-network
          ./mvnw clean package -DskipTests
      - name: Extract project version
        id: extract_project_version
        run: |
          cd book-network
          echo "VERSION=$(./mvnw -q -Dexec.executable='echo' -Dexec.args='${project.version}' --non-recursive exec:exec)" >> $GITHUB_OUTPUT
      - name: Login to DockerHub
        uses: docker/login-action@v3.2.0
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v6.3.0
        with:
          context: book-network
          file: docker/backend/Dockerfile
          push: true
          platforms: linux/amd64
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/bsn-api:${{ steps.extract_project_version.outputs.VERSION }}, ${{ secrets.DOCKERHUB_USERNAME }}/bsn-api:latest
          build-args: |
            PROFILE=prod
            APP_VERSION=${{ steps.extract_project_version.outputs.VERSION }}

  deploy:
    name: Deploy backend
    runs-on: ubuntu-latest
    needs: [build-docker-image]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Create PEM file
        run: |
          echo "${{ secrets.VPS_PEM_FILE }}" > /tmp/vps_key.pem
          chmod 400 /tmp/vps_key.pem

      - name: Create deployment folder
        run: ssh -i /tmp/vps_key.pem -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} "mkdir -p ci-cd"

      - name: Copy docker-compose file
        run: scp -i /tmp/vps_key.pem -o StrictHostKeyChecking=no docker-compose.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:ci-cd/docker-compose.yml

      - name: Set ENV variables & deploy
        run: |
          ssh -i /tmp/vps_key.pem -o StrictHostKeyChecking=no ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} <<EOF
          export ENV EMAIL_HOST_NAME=${{ secrets.EMAIL_HOST_NAME }}
          export ENV EMAIL_USERNAME=${{ secrets.EMAIL_USERNAME }}
          export ENV EMAIL_PASSWORD=${{ secrets.EMAIL_PASSWORD }}
          cd ci-cd
          docker-compose -f docker-compose.yml pull -q
          docker-compose -f docker-compose.yml up -d
          EOF